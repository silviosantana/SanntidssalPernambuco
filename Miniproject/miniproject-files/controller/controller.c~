#include "udp.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "time.h"
#define IP "192.168.0.1"

float integral;
float prev_error;
float Kp = 20;
float Ki = 900;	
//float Kd = 0.00189;
float derivative;
float y;
float dt = 0.0025;	
float u; 
float error;
int i;
struct timespec t;
struct timespec remain;
struct timespec sleep_time;
struct timespec now;
struct timespec then;


void start_simulation()
{
	UDPConn* conn = udpconn_new(IP, 9999);
    
  char sendBuf[64];  

  sprintf(sendBuf, "START");    
  udpconn_send(conn, sendBuf);
  
  udpconn_delete(conn);
}

void stop_simulation()
{
	UDPConn* conn = udpconn_new(IP, 9999);
    
  char sendBuf[64];  

  sprintf(sendBuf, "STOP");    
  udpconn_send(conn, sendBuf);
  
  udpconn_delete(conn);
}

float get_y ()
{
	UDPConn* conn = udpconn_new(IP, 9999);
    
  char sendBuf[64];
  char recvBuf[64]; 
	float y;
   
  memset(recvBuf, 0, sizeof(recvBuf));
  
  sprintf(sendBuf, "GET");    
  udpconn_send(conn, sendBuf);
  
  udpconn_receive(conn, recvBuf, sizeof(recvBuf));

	//printf("buffer: %s\n\r", recvBuf);

	//memmove(recvBuf, recvBuf+8, strlen(recvBuf));
	//printf("newMessage: {%s}\n\r", recvBuf);
	y = (float) atof(recvBuf + 8); 

	/*char * separator = ":";
	char * b = strtok(recvBuf, separator);
	printf("newMessage: {%s}\n\r", recvBuf);
	printf("B: {%s}\n\r", b);
	y = atof(recvBuf);*/

	//printf("Y: %f\n\r", y);
  
  udpconn_delete(conn);

	return y;
}

void set_u(float u)
{
	UDPConn* conn = udpconn_new(IP, 9999);
    
  char sendBuf[64]; 

	char command[20];

	snprintf(command, sizeof(command), "SET:%.6f", u);
	//printf("SET U: %s\n\r", command);

  sprintf(sendBuf, command);    
  udpconn_send(conn, sendBuf);
  
  udpconn_delete(conn);
}

float controller (float set_point)
{


	

	//printf("Hello controller\n\r");
	i = 0;
  clock_gettime(CLOCK_MONOTONIC, &now);
  then = timespec_add(now, t);

	printf("now: %d s | then: %d s\n\r", now.tv_sec, then.tv_sec);
	//printf("Time at start: %d s %d ns\n\r", now.tv_sec, now.tv_nsec);
	while(timespec_cmp(now, then) < 0){
		y = get_y();

		error = set_point - y;
		integral += error * dt;
		derivative  = (error - prev_error) / dt;
		prev_error  = error;

		//printf("Error: %f | integral: %f | dt: %f", error, integral, dt);    

		u = Kp * error + Ki * integral;

		//printf("Y: %f | u: %f\n\r", y, u);

		//u = Kp * error + Ki * integral + Kd * derivative;
		set_u(u);

		clock_nanosleep(CLOCK_MONOTONIC, 0, &sleep_time, &remain);
		printf("Time remaining: %d ns \n\r", remain.tv_nsec);
		clock_gettime(CLOCK_MONOTONIC, &now);
		++i;
  }
	
	printf("%d\n", i);
	printf("Time at end: %d s %d ns\n", now.tv_sec, now.tv_nsec);


	return y;

}


int main ()
{
	integral = 0;
	prev_error = 0;	

	t.tv_sec = 1;
	t.tv_nsec = 0;

	remain.tv_sec = 0;
	remain.tv_nsec = 0;

	sleep_time.tv_sec = 0;
	sleep_time.tv_nsec = 2500000;

	start_simulation();
  controller(1);
	controller(0);
	stop_simulation();
		
	return 0;
}









