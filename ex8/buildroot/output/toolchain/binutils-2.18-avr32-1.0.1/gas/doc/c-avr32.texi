@c Copyright 2005, 2006
@c Atmel Corporation
@c This is part of the GAS manual.
@c For copying conditions, see the file as.texinfo.

@ifset GENERIC
@page
@node AVR32-Dependent
@chapter AVR32 Dependent Features
@end ifset

@ifclear GENERIC
@node Machine Dependencies
@chapter AVR32 Dependent Features
@end ifclear

@cindex AVR32 support
@menu
* AVR32 Options::               Options
* AVR32 Syntax::                Syntax
* AVR32 Directives::            Directives
* AVR32 Opcodes::               Opcodes
@end menu

@node AVR32 Options
@section Options
@cindex AVR32 options
@cindex options for AVR32

There are currently no AVR32-specific options.  However, the following
options are planned:

@table @code

@cindex @code{--pic} command line option, AVR32
@cindex PIC code generation for AVR32
@item --pic
This option specifies that the output of the assembler should be marked
as position-independent code (PIC).  It will also ensure that
pseudo-instructions that deal with address calculation are output as
PIC, and that all absolute address references in the code are marked as
such.

@cindex @code{--linkrelax} command line option, AVR32
@item --linkrelax
This option specifies that the output of the assembler should be marked
as linker-relaxable.  It will also ensure that all PC-relative operands
that may change during linker relaxation get appropriate relocations.

@end table


@node AVR32 Syntax
@section Syntax
@menu
* AVR32-Chars::              Special Characters
* AVR32-Symrefs::            Symbol references
@end menu

@node AVR32-Chars
@subsection Special Characters

@cindex line comment character, AVR32
@cindex AVR32 line comment character
The presence of a @samp{//} on a line indicates the start of a comment
that extends to the end of the current line.  If a @samp{#} appears as
the first character of a line, the whole line is treated as a comment.

@cindex line separator, AVR32
@cindex statement separator, AVR32
@cindex AVR32 line separator
The @samp{;} character can be used instead of a newline to separate
statements.

@node AVR32-Symrefs
@subsection Symbol references

The absolute value of a symbol can be obtained by simply naming the
symbol.  However, as AVR32 symbols have 32-bit values, most symbols have
values that are outside the range of any instructions.

Instructions that take a PC-relative offset, e.g. @code{lddpc} or
@code{rcall}, can also reference a symbol by simply naming the symbol
(no explicit calculations necessary).  In this case, the assembler or
linker subtracts the address of the instruction from the symbol's value
and inserts the result into the instruction.  Note that even though an
overflow is less likely to happen for a relative reference than for an
absolute reference, the assembler or linker will generate an error if
the referenced symbol is too far away from the current location.

Relative references can be used for data as well.  For example:

@smallexample
        lddpc   r0, 2f
1:      add     r0, pc
        ...
        .align  2
2:      .int    @var{some_symbol} - 1b
@end smallexample

Here, r0 will end up with the run-time address of @var{some_symbol} even
if the program was loaded at a different address than it was linked
(position-independent code).

@subsubsection Symbol modifiers

@table @code

@item @code{hi(@var{symbol})}
Evaluates to the value of the symbol shifted right 16 bits.  This will
work even if @var{symbol} is defined in a different module.

@item @code{lo(@var{symbol})}
Evaluates to the low 16 bits of the symbol's value.  This will work even
if @var{symbol} is defined in a different module.

@item @code{@var{symbol}@@got}
Create a GOT entry for @var{symbol} and return the offset of that entry
relative to the GOT base.

@end table


@node AVR32 Directives
@section Directives
@cindex machine directives, AVR32
@cindex AVR32 directives

@table @code

@cindex @code{.cpool} directive, AVR32
@item .cpool
This directive causes the current contents of the constant pool to be
dumped into the current section at the current location (aligned to a
word boundary).  @code{GAS} maintains a separate constant pool for each
section and each sub-section.  The @code{.cpool} directive will only
affect the constant pool of the current section and sub-section.  At the
end of assembly, all remaining, non-empty constant pools will
automatically be dumped.

@end table


@node AVR32 Opcodes
@section Opcodes
@cindex AVR32 opcodes
@cindex opcodes for AVR32

@code{@value{AS}} implements all the standard AVR32 opcodes.  It also
implements several pseudo-opcodes, which are recommended to use wherever
possible because they give the tool chain better freedom to generate
optimal code.

@table @code

@cindex @code{LDA.W reg, symbol} pseudo op, AVR32
@item LDA.W
@smallexample
        lda.w   @var{reg}, @var{symbol}
@end smallexample

This instruction will load the address of @var{symbol} into
@var{reg}. The instruction will evaluate to one of the following,
depending on the relative distance to the symbol, the relative distance
to the constant pool and whether the @code{--pic} option has been
specified. If the @code{--pic} option has not been specified, the
alternatives are as follows:
@smallexample
        /* @var{symbol} evaluates to a small enough value */
        mov     @var{reg}, @var{symbol}

        /* (. - @var{symbol}) evaluates to a small enough value */
        sub     @var{reg}, pc, . - @var{symbol}

        /* Constant pool is close enough */
        lddpc   @var{reg}, @var{cpent}
        ...
@var{cpent}:
        .long   @var{symbol}

        /* Otherwise (not implemented yet, probably not necessary) */
        mov     @var{reg}, lo(@var{symbol})
        orh     @var{reg}, hi(@var{symbol})
@end smallexample

If the @code{--pic} option has been specified, the alternatives are as
follows:
@smallexample
        /* (. - @var{symbol}) evaluates to a small enough value */
        sub     @var{reg}, pc, . - @var{symbol}

        /* If @code{--linkrelax} not specified */
        ld.w    @var{reg}, r6[@var{symbol}@@got]

        /* Otherwise */
        mov     @var{reg}, @var{symbol}@@got / 4
        ld.w    @var{reg}, r6[@var{reg} << 2]
@end smallexample

If @var{symbol} is not defined in the same file and section as the
@code{LDA.W} instruction, the most pessimistic alternative of the
above is selected. The linker may convert it back into the most
optimal alternative when the final value of all symbols is known.

@cindex @code{CALL symbol} pseudo op, AVR32
@item CALL
@smallexample
        call    @var{symbol}
@end smallexample

This instruction will insert code to call the subroutine identified by
@var{symbol}. It will evaluate to one of the following, depending on
the relative distance to the symbol as well as the @code{--linkrelax}
and @code{--pic} command-line options.

If @var{symbol} is defined in the same section and input file, and the
distance is small enough, an @code{rcall} instruction is inserted:
@smallexample
        rcall   @var{symbol}
@end smallexample

Otherwise, if the @code{--pic} option has not been specified:
@smallexample
        mcall   @var{cpent}
        ...
@var{cpent}:
        .long   @var{symbol}
@end smallexample

Finally, if nothing else fits and the @code{--pic} option has been
specified, the assembler will indirect the call through the Global
Offset Table:
@smallexample
        /* If @code{--linkrelax} not specified */
        mcall   r6[@var{symbol}@@got]

        /* If @code{--linkrelax} specified */
        mov     lr, @var{symbol}@@got / 4
        ld.w    lr, r6[lr << 2]
        icall   lr
@end smallexample

The linker, after determining the final value of @var{symbol}, may
convert any of these into more optimal alternatives. This includes
deleting any superfluous constant pool- and GOT-entries.

@end table
